name: "Devin AI CodeQL Remediation Handler"

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
      head_ref:
        required: true
        type: string
      vulnerability_type:
        required: true
        type: string
      severity:
        required: true
        type: string
      rule_description:
        required: true
        type: string
      alerts:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      pr_number:
        required: true
        type: string
      head_ref:
        required: true
        type: string
      vulnerability_type:
        required: true
        type: string
      severity:
        required: true
        type: string
      rule_description:
        required: true
        type: string
      alerts:
        required: true
        type: string

jobs:
  create-remediation-mr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DISPATCH_GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Extract payload data
      id: payload
      run: |
        echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
        echo "head_ref=${{ inputs.head_ref }}" >> $GITHUB_OUTPUT
        echo "vulnerability_type=${{ inputs.vulnerability_type }}" >> $GITHUB_OUTPUT
        echo "severity=${{ inputs.severity }}" >> $GITHUB_OUTPUT
        echo "rule_description=${{ inputs.rule_description }}" >> $GITHUB_OUTPUT

    - name: Checkout feature branch
      run: |
        git fetch origin ${{ steps.payload.outputs.head_ref }}
        git checkout ${{ steps.payload.outputs.head_ref }}

    - name: Create remediation branch
      id: branch
      run: |
        TIMESTAMP=$(date +%s)
        BRANCH_NAME="devin/codeql-fix-${{ steps.payload.outputs.vulnerability_type }}-${TIMESTAMP}"
        git checkout -b "${BRANCH_NAME}"
        echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

    - name: Create Devin AI Remediation Session
      id: devin-session
      uses: actions/github-script@v7
      with:
        script: |
          const vulnerabilityType = '${{ steps.payload.outputs.vulnerability_type }}';
          const severity = '${{ steps.payload.outputs.severity }}';
          const ruleDescription = '${{ steps.payload.outputs.rule_description }}';
          const alerts = JSON.parse('${{ inputs.alerts }}');
          const originalPR = '${{ steps.payload.outputs.pr_number }}';
          const headRef = '${{ steps.payload.outputs.head_ref }}';
          
          // Prepare detailed prompt for Devin AI
          const affectedFiles = [...new Set(alerts.map(alert => alert.most_recent_instance?.location?.path).filter(Boolean))];
          const alertDetails = alerts.map(alert => {
            const location = alert.most_recent_instance?.location;
            return "- **File:** " + (location?.path || 'Unknown') + " (Line " + (location?.start_line || 'Unknown') + ")\n  - **Message:** " + (alert.most_recent_instance?.message?.text || 'No message') + "\n  - **Alert URL:** " + alert.html_url;
          }).join('\n');
          
          const filesList = affectedFiles.map(file => "- " + file).join('\n');
          
          const prompt = "Fix CodeQL " + vulnerabilityType + " vulnerabilities in GitHub repository\n\n" +
            "**Repository:** " + context.repo.owner + "/" + context.repo.repo + "\n" +
            "**Branch:** " + headRef + "\n" +
            "**Original PR:** #" + originalPR + "\n" +
            "**Vulnerability Type:** " + vulnerabilityType + "\n" +
            "**Severity:** " + severity + "\n" +
            "**Description:** " + ruleDescription + "\n\n" +
            "**Affected Files:**\n" + filesList + "\n\n" +
            "**Specific Alert Details:**\n" + alertDetails + "\n\n" +
            "**Task:**\n" +
            "1. Check out the branch \"" + headRef + "\" from the repository\n" +
            "2. Analyze the " + alerts.length + " CodeQL alert(s) for " + vulnerabilityType + " vulnerabilities\n" +
            "3. Implement secure fixes for each vulnerability instance\n" +
            "4. Ensure fixes follow security best practices and don't break functionality\n" +
            "5. Create a new branch with format: devin/codeql-fix-" + vulnerabilityType + "-{timestamp}\n" +
            "6. Commit the fixes with descriptive commit messages\n" +
            "7. Create a pull request against the \"" + headRef + "\" branch\n" +
            "8. Include detailed explanation of the security fixes in the PR description\n\n" +
            "**Security Guidelines:**\n" +
            "- Follow OWASP secure coding practices\n" +
            "- Validate and sanitize all inputs appropriately\n" +
            "- Use proper encoding for outputs\n" +
            "- Implement secure authentication and authorization where needed\n" +
            "- Test that functionality remains intact after fixes\n\n" +
            "Please focus specifically on the " + vulnerabilityType + " vulnerability type and create a comprehensive fix for all " + alerts.length + " instance(s).";

          // Call Devin API to create session
          const response = await fetch('https://api.devin.ai/v1/sessions', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer ${{ secrets.DEVIN_API_TOKEN }}',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              prompt: prompt,
              idempotent: true,
              unlisted: false
            })
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Devin API call failed: ${response.status} ${response.statusText} - ${errorText}`);
          }
          
          const sessionData = await response.json();
          console.log(`Created Devin session: ${sessionData.url}`);
          
          return {
            session_id: sessionData.session_id,
            session_url: sessionData.url,
            is_new_session: sessionData.is_new_session,
            vulnerabilityType,
            alertCount: alerts.length
          };

    - name: Create tracking commit
      run: |
        git config --local user.email "devin-ai-integration[bot]@users.noreply.github.com"
        git config --local user.name "Devin AI"
        
        # Create a simple tracking file
        echo "# Devin AI Session Tracking" > DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Session ID: ${{ fromJson(steps.devin-session.outputs.result).session_id }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Session URL: ${{ fromJson(steps.devin-session.outputs.result).session_url }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Vulnerability Type: ${{ steps.payload.outputs.vulnerability_type }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Severity: ${{ steps.payload.outputs.severity }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Alert Count: ${{ fromJson(steps.devin-session.outputs.result).alertCount }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Original PR: #${{ steps.payload.outputs.pr_number }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "Target Branch: ${{ steps.payload.outputs.head_ref }}" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "" >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "This file tracks the Devin AI session created to address CodeQL vulnerabilities." >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        echo "The actual fixes will be implemented by Devin AI in a separate pull request." >> DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        
        git add DEVIN_SESSION_${{ steps.payload.outputs.vulnerability_type }}.md
        git commit -m "track: Devin AI session for ${{ steps.payload.outputs.vulnerability_type }} vulnerabilities" \
                   -m "Created Devin session: ${{ fromJson(steps.devin-session.outputs.result).session_id }}" \
                   -m "Session URL: ${{ fromJson(steps.devin-session.outputs.result).session_url }}" \
                   -m "Addressing ${{ fromJson(steps.devin-session.outputs.result).alertCount }} instances" \
                   -m "Severity: ${{ steps.payload.outputs.severity }}"

    - name: Push remediation branch
      run: |
        git push origin ${{ steps.branch.outputs.branch_name }}

    - name: Create remediation MR
      uses: actions/github-script@v7
      with:
        script: |
          const vulnerabilityType = '${{ steps.payload.outputs.vulnerability_type }}';
          const severity = '${{ steps.payload.outputs.severity }}';
          const originalPR = '${{ steps.payload.outputs.pr_number }}';
          const headRef = '${{ steps.payload.outputs.head_ref }}';
          const branchName = '${{ steps.branch.outputs.branch_name }}';
          const alertCount = ${{ fromJson(steps.devin-session.outputs.result).alertCount }};
          
          const title = "ðŸ¤– Devin AI Session: Fix " + vulnerabilityType + " vulnerabilities (" + severity + ")";
          const body = "## ðŸ¤– Devin AI CodeQL Remediation Session\n\n" +
            "**Devin AI Session Created:** ${{ fromJson(steps.devin-session.outputs.result).session_url }}\n\n" +
            "This MR tracks the Devin AI session created to address **" + vulnerabilityType + "** vulnerabilities detected by CodeQL analysis.\n\n" +
            "### Session Details:\n" +
            "- **Session ID:** ${{ fromJson(steps.devin-session.outputs.result).session_id }}\n" +
            "- **Session URL:** ${{ fromJson(steps.devin-session.outputs.result).session_url }}\n" +
            "- **Vulnerability Type:** " + vulnerabilityType + "\n" +
            "- **Severity:** " + severity + "\n" +
            "- **Instances Found:** " + alertCount + "\n" +
            "- **Original PR:** #" + originalPR + "\n" +
            "- **Target Branch:** " + headRef + "\n\n" +
            "### What Devin AI Will Do:\n" +
            "1. âœ… Analyze the " + alertCount + " CodeQL alert(s) for " + vulnerabilityType + "\n" +
            "2. âœ… Implement secure fixes following security best practices\n" +
            "3. âœ… Create a separate pull request with the remediation changes\n" +
            "4. âœ… Target the fixes against your feature branch: `" + headRef + "`\n\n" +
            "### Next Steps:\n" +
            "1. **Monitor the Devin session:** Visit the session URL above to track progress\n" +
            "2. **Review Devin's PR:** Devin will create a separate PR with the actual fixes\n" +
            "3. **Merge Devin's fixes:** Once reviewed, merge Devin's PR into your feature branch\n" +
            "4. **Continue with your work:** Proceed with your original PR #" + originalPR + "\n\n" +
            "---\n" +
            "**ðŸ”— Devin Session:** ${{ fromJson(steps.devin-session.outputs.result).session_url }}\n" +
            "**Generated by:** Devin AI CodeQL Remediation Workflow\n" +
            "**Triggered by:** !codeql_remediation macro in PR #" + originalPR + "\n" +
            "**Link to Devin run:** https://app.devin.ai/sessions/b5ba7a9357b546978b17b5ef098b5ea3\n" +
            "**Requested by:** @pink-cupcakes";

          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            head: branchName,
            base: headRef,
            draft: false
          });
          
          // Add labels
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['security', 'codeql-remediation', 'automated', `severity-${severity}`]
          });
          
          // Comment on original PR
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: originalPR,
            body: "ðŸ¤– **Devin AI Session Created for " + vulnerabilityType + " Remediation**\n\n" +
              "**Devin Session:** ${{ fromJson(steps.devin-session.outputs.result).session_url }}\n" +
              "**Tracking MR:** " + pr.html_url + "\n" +
              "**Target Branch:** `" + headRef + "`\n" +
              "**Instances:** " + alertCount + "\n\n" +
              "Devin AI is now working on fixing the " + vulnerabilityType + " vulnerabilities. Monitor the session above and watch for Devin's remediation PR targeting your feature branch."
          });
          
          console.log("Created remediation MR: " + pr.html_url);
          return pr;
