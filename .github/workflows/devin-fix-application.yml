name: "Apply Devin Security Fixes"

on:
  workflow_dispatch:
    inputs:
      session_id:
        description: 'Devin session ID with security fixes'
        required: true
        type: string
      vulnerability_group:
        description: 'Vulnerability group name (e.g., CWE-78-Command-Injection)'
        required: true
        type: string
      target_branch:
        description: 'Target branch to create fix PR against'
        required: true
        type: string
      original_pr:
        description: 'Original PR number that triggered the analysis'
        required: true
        type: string

jobs:
  apply-devin-fixes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Git
      run: |
        git config --global user.name "Devin Security Bot"
        git config --global user.email "devin-security-bot@users.noreply.github.com"

    - name: Get Devin session results
      id: devin-results
      uses: actions/github-script@v7
      with:
        script: |
          const sessionId = '${{ github.event.inputs.session_id }}';
          const devinApiKey = process.env.DEVIN_API_TOKEN;
          
          if (!devinApiKey) {
            core.setFailed('DEVIN_API_TOKEN not found in secrets');
            return;
          }
          
          try {
            // Get session details
            const sessionResponse = await fetch(`https://api.devin.ai/v1/sessions/${sessionId}`, {
              headers: {
                'Authorization': `Bearer ${devinApiKey}`,
                'Content-Type': 'application/json'
              }
            });
            
            if (!sessionResponse.ok) {
              core.setFailed(`Failed to get Devin session: ${sessionResponse.status}`);
              return;
            }
            
            const sessionData = await sessionResponse.json();
            console.log(`Retrieved Devin session: ${sessionId}`);
            
            // Extract suggested fixes from session
            // Note: This is a simplified version - in practice, you'd need to parse
            // Devin's response format and extract the actual code changes
            const suggestedFixes = sessionData.messages || [];
            
            core.setOutput('has_fixes', suggestedFixes.length > 0);
            core.setOutput('fixes_data', JSON.stringify(suggestedFixes));
            
          } catch (error) {
            core.setFailed(`Error retrieving Devin session: ${error.message}`);
          }
      env:
        DEVIN_API_TOKEN: ${{ secrets.DEVIN_API_TOKEN }}

    - name: Create fix branch
      if: steps.devin-results.outputs.has_fixes == 'true'
      run: |
        TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
        VULN_GROUP="${{ github.event.inputs.vulnerability_group }}"
        TIMESTAMP=$(date +%s)
        FIX_BRANCH="devin/${TIMESTAMP}-fix-${VULN_GROUP,,}"
        
        echo "Creating fix branch: ${FIX_BRANCH}"
        git checkout -b "${FIX_BRANCH}" "origin/${TARGET_BRANCH}"
        echo "FIX_BRANCH=${FIX_BRANCH}" >> $GITHUB_ENV

    - name: Apply security fixes
      if: steps.devin-results.outputs.has_fixes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // This is a placeholder for applying Devin's suggested fixes
          // In a real implementation, you would:
          // 1. Parse Devin's response to extract file changes
          // 2. Apply the changes to the appropriate files
          // 3. Validate the changes don't break the build
          
          const fixesData = JSON.parse('${{ steps.devin-results.outputs.fixes_data }}');
          const vulnGroup = '${{ github.event.inputs.vulnerability_group }}';
          
          console.log(`Applying fixes for ${vulnGroup}`);
          console.log(`Fixes data:`, fixesData);
          
          // Example: Create a placeholder fix file to demonstrate the workflow
          const fixSummary = `# Security Fixes Applied by Devin
          
## Vulnerability Group: ${vulnGroup}
## Session ID: ${{ github.event.inputs.session_id }}
## Applied: ${new Date().toISOString()}

This file documents the security fixes applied by Devin for ${vulnGroup} vulnerabilities.

### Changes Made:
${fixesData.map((fix, index) => `${index + 1}. ${fix.content || 'Security fix applied'}`).join('\n')}

### Verification:
- [ ] Code compiles without errors
- [ ] Tests pass
- [ ] Security vulnerabilities are resolved
- [ ] No new issues introduced
          `;
          
          fs.writeFileSync('DEVIN_SECURITY_FIXES.md', fixSummary);
          console.log('Created security fixes documentation');

    - name: Commit and push fixes
      if: steps.devin-results.outputs.has_fixes == 'true'
      run: |
        git add .
        git commit -m "fix: apply Devin security fixes for ${{ github.event.inputs.vulnerability_group }}

        - Addresses vulnerabilities in group: ${{ github.event.inputs.vulnerability_group }}
        - Applied fixes from Devin session: ${{ github.event.inputs.session_id }}
        - Original PR: #${{ github.event.inputs.original_pr }}
        
        Co-authored-by: Devin AI <devin-ai-integration[bot]@users.noreply.github.com>"
        
        git push origin "${FIX_BRANCH}"

    - name: Create pull request
      if: steps.devin-results.outputs.has_fixes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const vulnGroup = '${{ github.event.inputs.vulnerability_group }}';
          const targetBranch = '${{ github.event.inputs.target_branch }}';
          const originalPr = '${{ github.event.inputs.original_pr }}';
          const sessionId = '${{ github.event.inputs.session_id }}';
          const fixBranch = process.env.FIX_BRANCH;
          
          const title = `fix: resolve ${vulnGroup} security vulnerabilities`;
          const body = `# üîí Security Fixes: ${vulnGroup}

## Overview
This PR contains automated security fixes generated by Devin AI for ${vulnGroup} vulnerabilities detected in PR #${originalPr}.

## Vulnerability Details
- **Group:** ${vulnGroup}
- **Original PR:** #${originalPr}
- **Devin Session:** ${sessionId}
- **Target Branch:** ${targetBranch}

## Changes Made
Devin has analyzed the security vulnerabilities and applied appropriate fixes following security best practices.

## Verification Checklist
- [ ] Code compiles without errors
- [ ] All tests pass
- [ ] Security vulnerabilities are resolved
- [ ] No new security issues introduced
- [ ] Code follows project conventions

## Next Steps
1. Review the proposed changes carefully
2. Run tests to ensure functionality is preserved
3. Verify security issues are resolved
4. Merge into ${targetBranch} if approved

---
**Generated by:** Devin Security Analysis Workflow
**Link to Devin run:** https://app.devin.ai/sessions/fd763fc5323a4779901347bf234df02a
**Requested by:** @pink-cupcakes

*This PR was automatically created as part of the security analysis workflow.*`;

          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            head: fixBranch,
            base: targetBranch,
            draft: false
          });
          
          console.log(`Created PR: ${pr.html_url}`);
          
          // Add labels
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: ['security', 'automated', 'devin-generated', vulnGroup.toLowerCase()]
          });

    - name: No fixes available
      if: steps.devin-results.outputs.has_fixes != 'true'
      run: |
        echo "‚ö†Ô∏è No fixes were generated by Devin for this vulnerability group."
        echo "Session ID: ${{ github.event.inputs.session_id }}"
        echo "Vulnerability Group: ${{ github.event.inputs.vulnerability_group }}"
