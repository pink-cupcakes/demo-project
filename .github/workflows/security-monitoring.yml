name: "Security Monitoring"

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  security-report:
    runs-on: ubuntu-latest
    permissions:
      security-events: read
      issues: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate Security Report
      uses: actions/github-script@v7
      with:
        script: |
          // Get all CodeQL alerts
          const { data: alerts } = await github.rest.codeScanning.listAlertsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Get existing security issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security-report',
            state: 'open'
          });
          
          // Group alerts by status and severity
          const stats = {
            open: { critical: 0, high: 0, medium: 0, low: 0 },
            fixed: { critical: 0, high: 0, medium: 0, low: 0 },
            dismissed: { critical: 0, high: 0, medium: 0, low: 0 }
          };
          
          const vulnerabilityTypes = {};
          
          alerts.forEach(alert => {
            const severity = alert.rule.severity;
            const state = alert.state;
            const ruleId = alert.rule.id;
            
            if (stats[state]) {
              stats[state][severity] = (stats[state][severity] || 0) + 1;
            }
            
            if (!vulnerabilityTypes[ruleId]) {
              vulnerabilityTypes[ruleId] = { count: 0, severity, description: alert.rule.description };
            }
            vulnerabilityTypes[ruleId].count++;
          });
          
          const totalOpen = Object.values(stats.open).reduce((a, b) => a + b, 0);
          const totalFixed = Object.values(stats.fixed).reduce((a, b) => a + b, 0);
          
          const reportTitle = `Security Report - ${new Date().toISOString().split('T')[0]}`;
          const reportBody = `# ðŸ”’ Security Report

## Summary
- **Open Vulnerabilities**: ${totalOpen}
- **Fixed Vulnerabilities**: ${totalFixed}
- **Total Scanned**: ${alerts.length}

## Open Vulnerabilities by Severity
- ðŸ”´ **Critical**: ${stats.open.critical || 0}
- ðŸŸ  **High**: ${stats.open.high || 0}
- ðŸŸ¡ **Medium**: ${stats.open.medium || 0}
- ðŸ”µ **Low**: ${stats.open.low || 0}

## Vulnerability Types
${Object.entries(vulnerabilityTypes)
  .sort(([,a], [,b]) => b.count - a.count)
  .map(([ruleId, data]) => `- **${ruleId}**: ${data.count} instances (${data.severity}) - ${data.description}`)
  .join('\n')}

## Recommendations
${totalOpen > 0 ? `
### Immediate Actions Required
- Review and address ${stats.open.critical || 0} critical vulnerabilities
- Plan remediation for ${stats.open.high || 0} high-severity issues
- Consider batch fixes for ${stats.open.medium + stats.open.low} medium/low priority items

### Automation Status
` : 'âœ… **No open vulnerabilities found!** Great job maintaining security standards.'}

---
*This report was automatically generated by the Security Monitoring workflow.*
*Reports are generated on every pull request and can be triggered manually.*`;

          // Close existing security report issues
          for (const issue of issues) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
          }
          
          // Create new security report issue
          const { data: newIssue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: reportTitle,
            body: reportBody,
            labels: ['security-report', 'automated']
          });
          
          console.log(`Created security report issue: ${newIssue.html_url}`);
